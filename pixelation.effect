// Always provided by OBS
uniform float4x4 ViewProj<
	bool automatic = true;
>;

// Provided by Stream Effects
uniform float4 Time<
	bool automatic = true;
>;
uniform float4 ViewSize<
	bool automatic = true;
>;
uniform texture2d InputA<
	bool automatic = true;
>;

sampler_state def_sampler {
    AddressU  = Clamp;
    AddressV  = Clamp;
    Filter    = Linear;
};

//#define sizeX 18.
//#define sizeY 18.

//void mainImage( out float4 fragColor, in float2 fragCoord )
//{
// float2 uv = fragCoord/ViewSize.xy;
// float px = sizeX *(1./ViewSize.x);
// float py = sizeY *(1./ViewSize.y);
// float2 c = float2(px*floor(uv.x/px), py*floor(uv.y/py));
// fragColor = InputA.Sample(def_sampler, c);
//} 

//void mainImage( out vec4 fragColor, in vec2 fragCoord )
//{
//    float x= ViewSize.x/10.0;
// 	if (fragCoord,iMouse.x!=0.0)
//       x=iMouse.x;
//    float modul = mod(fragCoord,x/12.0);
//	float2 normalizedCord= float2(fragCoord-modul)/ViewSize.xy;
//	fragColor =InputA.Sample(def_sampler, normalizedCord);
//}

#define PIXEL_SIZE 5.0

void mainImage( out float4 fragColor, in float2 fragCoord ) {
	float2 uv = fragCoord.xy / ViewSize.xy;
    
    float plx = ViewSize.x * PIXEL_SIZE / 500.0;
    float ply = ViewSize.y * PIXEL_SIZE / 275.0;
    
    float dx = plx * (1.0 / ViewSize.x);
    float dy = ply * (1.0 / ViewSize.y);
    
    uv.x = dx * floor(uv.x / dx);
    uv.y = dy * floor(uv.y / dy);
    
    fragColor = InputA.Sample(def_sampler, uv);
}


struct VertFragData {
	float4 pos : POSITION;
	float2 uv  : TEXCOORD0;
};

VertFragData VSDefault(VertFragData vtx) {
	vtx.pos = mul(float4(vtx.pos.xyz, 1.0), ViewProj);
	return vtx;
}

float4 PSDefault(VertFragData vtx) : TARGET {
    float4 col = float4(1., 1., 1., 1.);
    mainImage(col, vtx.uv * ViewSize.xy);
    return col;
}

technique Draw
{
	pass
	{
		vertex_shader = VSDefault(vtx);
		pixel_shader  = PSDefault(vtx); 
	}
}